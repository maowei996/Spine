{"version":3,"sources":["file:///Users/mac/WorkSpace/maowei/spine/assets/src/Data/SkeletManager.ts"],"names":["SkeletManager","_skeletons","_map","Map","_curskeleton","getInstance","_instance","add","data","has","key","set","push","skelet","skeletons","get","find","spineKey","v","count","size","destroy"],"mappings":";;;8BAGaA,a;;;;;;;;;;;;;;;;;;;+BAAAA,a,GAAN,MAAMA,aAAN,CAAoB;AAAA;AAAA,eAIjBC,UAJiB,GAIc,EAJd;AAAA,eAMjBC,IANiB,GAMa,IAAIC,GAAJ,EANb;AAAA,eAQjBC,YARiB,GAQS,IART;AAAA;;AAYA,eAAXC,WAAW,GAAiB;AAExC,cAAG,CAACL,aAAa,CAACM,SAAlB,EAA4B;AAC1BN,YAAAA,aAAa,CAACM,SAAd,GAA0B,IAAIN,aAAJ,EAA1B;AACD;;AAED,iBAAOA,aAAa,CAACM,SAArB;AACD;;AAIMC,QAAAA,GAAG,CAACC,IAAD,EAAkB;AAE1B,cAAG,KAAKN,IAAL,CAAUO,GAAV,CAAcD,IAAI,CAACE,GAAnB,CAAH,EAA2B;AACzB;AACD;;AAED,eAAKR,IAAL,CAAUS,GAAV,CAAcH,IAAI,CAACE,GAAnB,EAAwBF,IAAxB;;AAEA,eAAKP,UAAL,CAAgBW,IAAhB,CAAqBJ,IAArB;;AAEA,eAAKK,MAAL,GAAcL,IAAd;AACD;;AAGmB,YAATM,SAAS,GAAoB;AACtC,iBAAO,KAAKb,UAAZ;AACD;;AAGMc,QAAAA,GAAG,CAACL,GAAD,EAAwB;AAChC;AACA,iBAAO,KAAKR,IAAL,CAAUa,GAAV,CAAcL,GAAd,CAAP;AACD;;AAEMM,QAAAA,IAAI,CAACC,QAAD,EAA6B;AAEtC,cAAIT,IAAe,GAAG,IAAtB;;AACA,eAAK,MAAMU,CAAX,IAAgB,KAAKjB,UAArB,EAAiC;AAC/B,gBAAGiB,CAAC,CAACR,GAAF,IAASO,QAAZ,EAAqB;AACnBT,cAAAA,IAAI,GAAGU,CAAP;AACA;AACD;AACF;;AAED,iBAAOV,IAAP;AACD;;AAGgB,YAANK,MAAM,CAACK,CAAD,EAAS;AACxB,eAAKd,YAAL,GAAoBc,CAApB;AACD;;AAEgB,YAANL,MAAM,GAAc;AAC7B,iBAAO,KAAKT,YAAZ;AACD;;AAEQ,YAALe,KAAK,GAAW;AAClB,iBAAO,KAAKjB,IAAL,CAAUkB,IAAjB;AACD;;AAGMC,QAAAA,OAAO,GAAG;AACf,eAAKnB,IAAL,GAAY,IAAZ;AACD;;AA5EwB,O;;AAAdF,MAAAA,a,CAEIM,S,GAAY,I","sourcesContent":["import { SpineData } from \"./SpineData\";\n\n\nexport class SkeletManager {\n\n  private static _instance = null;\n\n  private _skeletons: Array<SpineData> = [];\n\n  private _map: Map<string,SpineData> = new Map<string,SpineData>;\n\n  private _curskeleton: SpineData = null;\n\n\n  \n  public static getInstance():SkeletManager {\n\n    if(!SkeletManager._instance){\n      SkeletManager._instance = new SkeletManager();\n    }\n\n    return SkeletManager._instance;\n  }\n\n\n\n  public add(data: SpineData) {\n\n    if(this._map.has(data.key)){\n      return;\n    }\n\n    this._map.set(data.key, data);\n\n    this._skeletons.push(data);\n\n    this.skelet = data;\n  }\n  \n\n  public get skeletons():Array<SpineData> {\n    return this._skeletons;\n  }\n\n\n  public get(key: string):SpineData {\n    // return this._map![key];\n    return this._map.get(key);\n  }\n\n  public find(spineKey: string):SpineData {\n\n    let data: SpineData = null;\n    for (const v of this._skeletons) {\n      if(v.key == spineKey){\n        data = v;\n        break;\n      }\n    }\n\n    return data;\n  }\n\n\n  public set skelet(v: any) {\n    this._curskeleton = v;\n  }\n\n  public get skelet():SpineData  {\n    return this._curskeleton;\n  }\n\n  get count(): number {\n    return this._map.size;\n  }\n\n\n  public destroy() {\n    this._map = null;\n  }\n\n}"]}