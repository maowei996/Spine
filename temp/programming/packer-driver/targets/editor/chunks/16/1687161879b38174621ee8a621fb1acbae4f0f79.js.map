{"version":3,"sources":["file:///Users/weimao/XiaYu/VScodeProject/CocosCreate/Spine/assets/src/Machine.ts"],"names":["_decorator","Component","Sprite","sp","Label","EventManager","EventType","SkeletManager","ccclass","property","Machine","Skeleton","spineJson","spineAtlas","spineTexture","start","getInstance","on","onEvent","data","console","log","eventType","_eventType","skeleton","REFRESH_SKELETON","skeletonData","param","animation","defanimation","bBinary","parse","_skeletonCache","updateUI","CHANGE_SPINE","spineKey","spineDate","get","skelet","CHANGE_SPINE_ANIMATION","UPDATE_SPINE_SKIN","setSkin","OPENOROFF_DEBUG","CHANGE_SPINE_LOOP","loop","UPDATE_SCALE","node","setScale","fpsLaebl","string","fps","toString","szLaebl","Math","ceil","width","height","versionLaebl","version","bonesLaebl","bones","slotsLaebl","slots","onDisable","off"],"mappings":"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","sourcesContent":["\n\nimport { _decorator, Component, Node,Sprite,assetManager,Texture2D,SpriteFrame,ImageAsset,sp,Label, math } from 'cc';\nimport EventManager from './EventManager';\nimport {EventType, EventData} from './Define'\nimport { SkeletManager } from './Data/SkeletManager';\n\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('Machine')\nexport class Machine extends Component {\n\n  @property(Sprite)\n  sp: Sprite = null!;\n\n  @property(sp.Skeleton)\n  skeleton: sp.Skeleton = null!;\n\n  @property(Label)\n  fpsLaebl: Label = null;\n\n  @property(Label)\n  szLaebl: Label = null;\n  \n  @property(Label)\n  versionLaebl: Label = null;\n\n  @property(Label)\n  bonesLaebl: Label = null;\n  \n  @property(Label)\n  slotsLaebl: Label = null;\n\n\n  spineJson :any = null;\n  spineAtlas : any = null;\n  spineTexture: any = null;\n\n\n  start() {\n\n    EventManager.getInstance().on('machine', this.onEvent, this);\n    \n  }\n\n\n  onEvent (data: EventData) {\n    console.log('[Machine]收到了事件消息_type:',data.eventType)\n\n    let _eventType = data.eventType;\n    let skeleton = this.skeleton;\n\n    if(_eventType == EventType.REFRESH_SKELETON) {\n      skeleton.skeletonData = data.param.skeletonData;\n      skeleton.animation = data.param.defanimation;\n\n      if(data.param.bBinary){\n\n        data.param.parse(data.param.skeletonData._skeletonCache);\n\n        skeleton.animation = data.param.defanimation;\n      }\n\n      this.updateUI();\n\n      // console.log('onEvent.skeleton:',skeleton);\n    }\n    else if(_eventType == EventType.CHANGE_SPINE){\n      //切换角色\n      console.log('切换角色');\n      let spineKey = data.param;\n      let spineDate = SkeletManager.getInstance().get(spineKey);\n      if(spineDate){\n        skeleton.skeletonData = spineDate.skeletonData;\n        skeleton.animation = spineDate.defanimation;\n\n        SkeletManager.getInstance().skelet = spineDate;\n\n        this.updateUI();\n      }\n    }\n    else if(_eventType == EventType.CHANGE_SPINE_ANIMATION){\n      skeleton.animation = data.param;\n    }\n    else if(_eventType == EventType.UPDATE_SPINE_SKIN){\n\n      skeleton.setSkin(data.param);\n    }\n    else if(_eventType == EventType.OPENOROFF_DEBUG){\n\n    }\n    else if(_eventType == EventType.CHANGE_SPINE_LOOP){\n      skeleton.loop = data.param;\n    }\n    else if(_eventType == EventType.UPDATE_SCALE){\n      skeleton.node.setScale(data.param,data.param,1);// = data.param;\n    }\n\n  }\n\n  updateUI() {\n    let skelet = SkeletManager.getInstance().skelet;\n    this.fpsLaebl.string = 'fps:'+ ((skelet.fps == 0) ? 30:skelet.fps).toString();\n    this.szLaebl.string = 'width:'+ Math.ceil(skelet.width) + \" \" + 'height:' + Math.ceil(skelet.height);\n    this.versionLaebl.string = 'version:'+skelet.version;\n    this.bonesLaebl.string = 'bones:'+skelet.bones;\n    this.slotsLaebl.string = 'slots:'+skelet.slots;\n  }\n\n\n\n  onDisable () {\n    EventManager.getInstance().off('machine',this.onEvent,this);\n  }\n\n}"]}