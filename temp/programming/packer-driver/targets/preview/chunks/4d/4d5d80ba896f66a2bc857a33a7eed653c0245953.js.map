{"version":3,"sources":["file:///Users/weimao/XiaYu/VScodeProject/CocosCreate/spine/assets/src/Machine.ts"],"names":["_decorator","Component","Sprite","assetManager","Texture2D","sp","EventManager","EventType","ccclass","property","Machine","Skeleton","spineJson","spineAtlas","spineTexture","start","getInstance","on","onEvent","data","console","log","eventType","_eventType","skeleton","REFRESH_SKELETON","skeletonData","param","animation","defanimation","CHANGE_SPINE","CHANGE_SPINE_ANIMATION","UPDATE_SPINE_SKIN","setSkin","OPENOROFF_DEBUG","CHANGE_SPINE_LOOP","loop","UPDATE_SCALE","node","setScale","loadRemoto","base","loadRemote","err","asset","cc","error","texture","image","spriteFrame","addSpine","SkeletonData","skeletonJson","atlasText","textures","textureNames","onLoadSpine2","ske","atlas","loadAny","url","ext","assets","imageAsset","onDisable","off"],"mappings":"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","sourcesContent":["\n\nimport { _decorator, Component, Node,Sprite,assetManager,Texture2D,SpriteFrame,ImageAsset,sp } from 'cc';\nimport FileTools from './Tool/FileTools';\nimport { Html5 } from './Tool/Html5';\nimport EventManager from './EventManager';\nimport {EventType, EventData} from './Define'\n\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('Machine')\nexport class Machine extends Component {\n\n  @property(Sprite)\n  sp: Sprite = null!;\n\n  @property(sp.Skeleton)\n  skeleton: sp.Skeleton = null!;\n\n  spineJson :any = null;\n  spineAtlas : any = null;\n  spineTexture: any = null;\n\n\n\n\n  start() {\n\n    EventManager.getInstance().on('machine', this.onEvent, this);\n    \n  }\n\n\n  onEvent (data: EventData) {\n    console.log('[Machine]收到了事件消息_type:',data.eventType)\n\n    let _eventType = data.eventType;\n    let skeleton = this.skeleton;\n\n    if(_eventType == EventType.REFRESH_SKELETON) {\n      skeleton.skeletonData = data.param.skeletonData;\n      skeleton.animation = data.param.defanimation;\n\n      //console.log('onEvent.skeleton:',skeleton);\n    }\n    else if(_eventType == EventType.CHANGE_SPINE){\n      //切换角色\n      \n\n    }\n    else if(_eventType == EventType.CHANGE_SPINE_ANIMATION){\n      skeleton.animation = data.param;\n    }\n    else if(_eventType == EventType.UPDATE_SPINE_SKIN){\n\n      skeleton.setSkin(data.param);\n    }\n    else if(_eventType == EventType.OPENOROFF_DEBUG){\n\n    }\n    else if(_eventType == EventType.CHANGE_SPINE_LOOP){\n      skeleton.loop = data.param;\n    }\n    else if(_eventType == EventType.UPDATE_SCALE){\n      skeleton.node.setScale(data.param,data.param,1);// = data.param;\n    }\n\n  }\n\n\n  loadRemoto () {\n    let sp = this.sp;\n    let base = 'http://127.0.0.1/image/Socre_CandyMonsters_Scatter.png';\n    assetManager.loadRemote(base, (err, asset: ImageAsset) => {\n      if (err) return cc.error(err);\n      console.log('asset:',asset)\n\n      let texture = new Texture2D();\n      texture.image = asset;\n      // sp.spriteFrame = new SpriteFrame();\n      // sp.spriteFrame.setTexture(texture)\n      // sp.spriteFrame._texture = texture\n      // sp.spriteFrame._texture = texture.getHtmlElementObj()\n      sp.spriteFrame.texture = texture\n    })\n  }\n\n\n\n  private addSpine () {\n    // let spineNode = new Node();\n    // spineNode.name = 'newSpine';\n    // spineNode.setPosition(0,0);\n    // var skeleton = spineNode.addComponent(sp.Skeleton);\n    // // skeleton.parent = this.node;\n    // cc.find(\"Canvas\").addChild(spineNode);\n\n    let skeleton = this.skeleton\n\n    let asset = new sp.SkeletonData();\n    asset.skeletonJson = this.spineJson;\n    asset.atlasText = this.spineAtlas;\n    asset.textures = [this.spineTexture];\n    asset.textureNames = ['test_guai_001.png'];\n\n\n    skeleton.skeletonData = asset;\n    skeleton.animation = 'beiji';\n    //skeleton._updateSkeletonData();\n  }\n\n\n  onLoadSpine2() {\n    // let comp = this.getComponent('sp.Skeleton') as sp.Skeleton;\n    // var spineNode = new cc.Node();\n    // spineNode.name = 'newSpine';\n    // spineNode.setPosition(49, -237);\n    // var skeleton = spineNode.addComponent(sp.Skeleton);\n    // cc.find(\"Canvas\").addChild(spineNode);\n\n    let skeleton = this.skeleton\n\n    let image = \"http://127.0.0.1/test_guai_001.png\";\n    let ske = \"http://127.0.0.1/test_guai_001.json\";\n    let atlas = \"http://127.0.0.1/test_guai_001.atlas\";\n    assetManager.loadAny([{ url: atlas, ext: '.txt' }, { url: ske, ext: '.txt' }], (error, assets) => {\n        assetManager.loadRemote(image, (error, imageAsset:ImageAsset) => {\n\n            let texture = new Texture2D();\n            texture.image = imageAsset;\n\n\n            let asset = new sp.SkeletonData();\n            asset.skeletonJson = assets[1];\n            asset.atlasText = assets[0];\n            asset.textures = [texture];\n            asset.textureNames = ['test_guai_001.png'];\n            \n            skeleton.skeletonData = asset;\n            skeleton.animation = 'beiji';\n        });\n    });\n  }\n\n\n\n  onDisable () {\n    EventManager.getInstance().off('machine',this.onEvent,this);\n  }\n\n}"]}