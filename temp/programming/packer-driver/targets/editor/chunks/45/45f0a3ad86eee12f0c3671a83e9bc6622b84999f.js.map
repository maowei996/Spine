{"version":3,"sources":["file:///Users/weimao/XiaYu/VScodeProject/CocosCreate/Spine/assets/src/Machine.ts"],"names":["_decorator","Component","Sprite","assetManager","Texture2D","sp","Label","EventManager","EventType","SkeletManager","ccclass","property","Machine","Skeleton","spineJson","spineAtlas","spineTexture","start","getInstance","on","onEvent","data","console","log","eventType","_eventType","skeleton","REFRESH_SKELETON","skeletonData","param","animation","defanimation","bBinary","parse","_skeletonCache","updateUI","CHANGE_SPINE","spineKey","spineDate","get","skelet","CHANGE_SPINE_ANIMATION","UPDATE_SPINE_SKIN","setSkin","OPENOROFF_DEBUG","CHANGE_SPINE_LOOP","loop","UPDATE_SCALE","node","setScale","fpsLaebl","string","fps","szLaebl","Math","ceil","width","height","versionLaebl","version","bonesLaebl","bones","slotsLaebl","slots","loadRemoto","base","loadRemote","err","asset","cc","error","texture","image","spriteFrame","addSpine","SkeletonData","skeletonJson","atlasText","textures","textureNames","onLoadSpine2","ske","atlas","loadAny","url","ext","assets","imageAsset","onLoadSpineSke","comp","_nativeAsset","_uuid","_nativeURL","ani","setAnimation","onDisable","off"],"mappings":"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","sourcesContent":["\n\nimport { _decorator, Component, Node,Sprite,assetManager,Texture2D,SpriteFrame,ImageAsset,sp,Label, math } from 'cc';\nimport FileTools from './Tool/FileTools';\nimport { Html5 } from './Tool/Html5';\nimport EventManager from './EventManager';\nimport {EventType, EventData} from './Define'\nimport { SkeletManager } from './Data/SkeletManager';\n\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('Machine')\nexport class Machine extends Component {\n\n  @property(Sprite)\n  sp: Sprite = null!;\n\n  @property(sp.Skeleton)\n  skeleton: sp.Skeleton = null!;\n\n  @property(Label)\n  fpsLaebl: Label = null;\n\n  @property(Label)\n  szLaebl: Label = null;\n  \n  @property(Label)\n  versionLaebl: Label = null;\n\n  @property(Label)\n  bonesLaebl: Label = null;\n  \n  @property(Label)\n  slotsLaebl: Label = null;\n\n\n  spineJson :any = null;\n  spineAtlas : any = null;\n  spineTexture: any = null;\n\n\n  start() {\n\n    EventManager.getInstance().on('machine', this.onEvent, this);\n    \n  }\n\n\n  onEvent (data: EventData) {\n    console.log('[Machine]收到了事件消息_type:',data.eventType)\n\n    let _eventType = data.eventType;\n    let skeleton = this.skeleton;\n\n    if(_eventType == EventType.REFRESH_SKELETON) {\n      skeleton.skeletonData = data.param.skeletonData;\n      skeleton.animation = data.param.defanimation;\n\n      if(data.param.bBinary){\n\n        data.param.parse(data.param.skeletonData._skeletonCache);\n\n        skeleton.animation = data.param.defanimation;\n      }\n\n      this.updateUI();\n\n      // console.log('onEvent.skeleton:',skeleton);\n    }\n    else if(_eventType == EventType.CHANGE_SPINE){\n      //切换角色\n      console.log('切换角色');\n      let spineKey = data.param;\n      let spineDate = SkeletManager.getInstance().get(spineKey);\n      if(spineDate){\n        skeleton.skeletonData = spineDate.skeletonData;\n        skeleton.animation = spineDate.defanimation;\n\n        SkeletManager.getInstance().skelet = spineDate;\n\n        this.updateUI();\n      }\n    }\n    else if(_eventType == EventType.CHANGE_SPINE_ANIMATION){\n      skeleton.animation = data.param;\n    }\n    else if(_eventType == EventType.UPDATE_SPINE_SKIN){\n\n      skeleton.setSkin(data.param);\n    }\n    else if(_eventType == EventType.OPENOROFF_DEBUG){\n\n    }\n    else if(_eventType == EventType.CHANGE_SPINE_LOOP){\n      skeleton.loop = data.param;\n    }\n    else if(_eventType == EventType.UPDATE_SCALE){\n      skeleton.node.setScale(data.param,data.param,1);// = data.param;\n    }\n\n  }\n\n  updateUI() {\n    let skelet = SkeletManager.getInstance().skelet;\n    this.fpsLaebl.string = 'fps:'+(skelet.fps == 0) ? 30:skelet.fps;\n    this.szLaebl.string = 'width:'+ Math.ceil(skelet.width) + \" \" + 'height:' + Math.ceil(skelet.height);\n    this.versionLaebl.string = 'version:'+skelet.version;\n    this.bonesLaebl.string = 'bones:'+skelet.bones;\n    this.slotsLaebl.string = 'slots:'+skelet.slots;\n  }\n\n\n  loadRemoto () {\n    let sp = this.sp;\n    let base = 'http://127.0.0.1/image/Socre_CandyMonsters_Scatter.png';\n    assetManager.loadRemote(base, (err, asset: ImageAsset) => {\n      if (err) return cc.error(err);\n      console.log('asset:',asset)\n\n      let texture = new Texture2D();\n      texture.image = asset;\n      // sp.spriteFrame = new SpriteFrame();\n      // sp.spriteFrame.setTexture(texture)\n      // sp.spriteFrame._texture = texture\n      // sp.spriteFrame._texture = texture.getHtmlElementObj()\n      sp.spriteFrame.texture = texture\n    })\n  }\n\n\n\n  private addSpine () {\n    // let spineNode = new Node();\n    // spineNode.name = 'newSpine';\n    // spineNode.setPosition(0,0);\n    // var skeleton = spineNode.addComponent(sp.Skeleton);\n    // // skeleton.parent = this.node;\n    // cc.find(\"Canvas\").addChild(spineNode);\n\n    let skeleton = this.skeleton\n\n    let asset = new sp.SkeletonData();\n    asset.skeletonJson = this.spineJson;\n    asset.atlasText = this.spineAtlas;\n    asset.textures = [this.spineTexture];\n    asset.textureNames = ['test_guai_001.png'];\n\n\n    skeleton.skeletonData = asset;\n    skeleton.animation = 'beiji';\n    //skeleton._updateSkeletonData();\n  }\n\n\n  onLoadSpine2() {\n    // let comp = this.getComponent('sp.Skeleton') as sp.Skeleton;\n    // var spineNode = new cc.Node();\n    // spineNode.name = 'newSpine';\n    // spineNode.setPosition(49, -237);\n    // var skeleton = spineNode.addComponent(sp.Skeleton);\n    // cc.find(\"Canvas\").addChild(spineNode);\n\n    let skeleton = this.skeleton\n\n    let image = \"http://127.0.0.1/test_guai_001.png\";\n    let ske = \"http://127.0.0.1/test_guai_001.json\";\n    let atlas = \"http://127.0.0.1/test_guai_001.atlas\";\n    assetManager.loadAny([{ url: atlas, ext: '.txt' }, { url: ske, ext: '.txt' }], (error, assets) => {\n        assetManager.loadRemote(image, (error, imageAsset:ImageAsset) => {\n\n            let texture = new Texture2D();\n            texture.image = imageAsset;\n\n\n            let asset = new sp.SkeletonData();\n            asset.skeletonJson = assets[1];\n            asset.atlasText = assets[0];\n            asset.textures = [texture];\n            asset.textureNames = ['test_guai_001.png'];\n            \n            skeleton.skeletonData = asset;\n            skeleton.animation = 'beiji';\n        });\n    });\n  }\n\n\n  onLoadSpineSke() {\n\n    // let comp = this.getComponent('sp.Skeleton') as sp.Skeleton;\n    let comp = this.skeleton\n\n    let image = \"http://127.0.0.1/wild/wild_socre.png\";\n    let ske = \"http://127.0.0.1/wild/wild_socre.skel\";\n    let atlas = \"http://127.0.0.1/wild/wild_socre.atlas\";\n\n    assetManager.loadAny([{ url: atlas, ext: '.txt' }, { url: ske, ext: '.bin' }], (error, assets) => {\n        assetManager.loadRemote(image, (error, texture: Texture2D) => {\n            let asset = new sp.SkeletonData();\n            asset._nativeAsset = assets[1];\n            asset.atlasText = assets[0];\n            asset.textures = [texture];\n            asset.textureNames = ['1.png'];\n            asset._uuid = ske; // 可以传入任意字符串，但不能为空\n            asset._nativeURL = ske; // 传入一个二进制路径用作 initSkeleton 时的 filePath 参数使用\n\n            comp.skeletonData = asset;\n            let ani = comp.setAnimation(0, 'walk', true);\n        });\n    });\n  }\n\n\n\n  onDisable () {\n    EventManager.getInstance().off('machine',this.onEvent,this);\n  }\n\n}"]}