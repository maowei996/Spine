{"version":3,"sources":["file:///Users/weimao/XiaYu/VScodeProject/CocosCreate/Spine/assets/src/Data/SpineData.ts"],"names":["SpineData","bJson","bBinary","name","key","url","version","defanimation","_jsonData","_atlasData","_skeletData","_textureData","width","height","fps","bones","slots","meshs","skeletonData","events","Array","skins","animations","parse","_skeletonCashe","length","v","duration","toString","push","iterator","split"],"mappings":";;;kEAGaA,S;;;;;;;;;;;;;;;;;2BAAAA,S,GAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA,eAEdC,KAFc,GAEG,KAFH;AAAA,eAIdC,OAJc,GAIK,KAJL;AAAA,eAMdC,IANc,GAMC,EAND;AAAA,eAQdC,GARc,GAQA,EARA;AAAA,eAUdC,GAVc,GAUA,EAVA;AAAA,eAYdC,OAZc,GAYI,OAZJ;AAAA,eAedC,YAfc,GAeS,EAfT;AAAA,eAiBdC,SAjBc,GAiBI,IAjBJ;AAAA,eAkBdC,UAlBc,GAkBO,IAlBP;AAAA,eAmBdC,WAnBc,GAmBK,IAnBL;AAAA,eAoBdC,YApBc,GAoBa,IApBb;AAAA,eAsBdC,KAtBc,GAsBE,CAtBF;AAAA,eAuBdC,MAvBc,GAuBG,CAvBH;AAAA,eAyBdC,GAzBc,GAyBA,CAzBA;AAAA,eA2BdC,KA3Bc,GA2BE,CA3BF;AAAA,eA4BdC,KA5Bc,GA4BE,CA5BF;AAAA,eA6BdC,KA7Bc,GA6BE,CA7BF;AAAA,eAgCdC,YAhCc,GAgCkB,IAhClB;AAAA,eAmCdC,MAnCc,GAmCU,IAAIC,KAAJ,EAnCV;AAAA,eAsCdC,KAtCc,GAsCS,IAAID,KAAJ,EAtCT;AAAA,eAyCdE,UAzCc,GAyCc,EAzCd;AAAA;;AA4CdC,QAAAA,KAAK,CAAEC,cAAF,EAAuB;AAAA;;AAEjC,eAAKZ,KAAL,GAAaY,cAAc,CAACZ,KAA5B;AACA,eAAKC,MAAL,GAAcW,cAAc,CAACX,MAA7B;AACA,eAAKP,OAAL,GAAekB,cAAc,CAAClB,OAA9B;AACA,eAAKQ,GAAL,GAAWU,cAAc,CAACV,GAA1B;AAEA,cAAIQ,UAAU,GAAGE,cAAc,CAACF,UAAf,IAA6B,EAA9C;AACA,cAAID,KAAK,GAAGG,cAAc,CAACH,KAAf,IAAwB,EAApC;AACA,cAAIF,MAAM,GAAGK,cAAc,CAACL,MAAf,IAAyB,EAAtC;AAEA,eAAKJ,KAAL,2BAAaS,cAAc,CAACT,KAA5B,qBAAa,qBAAsBU,MAAnC;AACA,eAAKT,KAAL,2BAAaQ,cAAc,CAACR,KAA5B,qBAAa,qBAAsBS,MAAnC;;AAEA,eAAK,IAAMC,CAAX,IAAgBJ,UAAhB,EAA4B;AAC1B,gBAAInB,IAAI,GAAGuB,CAAC,CAACvB,IAAb;;AACA,gBAAGuB,CAAC,CAACC,QAAF,IAAc,CAAjB,EAAmB;AACjBxB,cAAAA,IAAI,GAAGA,IAAI,GAAG,GAAP,GAAa,CAAEuB,CAAC,CAACC,QAAF,GAAa,CAAd,GAAmBD,CAAC,CAACC,QAArB,GAA+B,CAAhC,EAAmCC,QAAnC,EAApB;AACD;;AACD,iBAAKN,UAAL,CAAgBO,IAAhB,CAAqB1B,IAArB;AACD;;AAED,cAAGkB,KAAK,YAAYD,KAApB,EAA0B;AACxB,iBAAK,IAAMU,QAAX,IAAuBT,KAAvB,EAA8B;AAC5B,mBAAKA,KAAL,CAAWQ,IAAX,CAAgBC,QAAQ,CAAC3B,IAAzB;AACD;AACF,WAJD,MAIM;AACJ,iBAAKkB,KAAL,CAAWQ,IAAX,CAAgB,SAAhB;AACD;;AAED,eAAK,IAAMC,SAAX,IAAuBX,MAAvB,EAA+B;AAC7B,iBAAKA,MAAL,CAAYU,IAAZ,CAAiBC,SAAQ,CAAC3B,IAAT,IAAiB,OAAlC;AACD;;AAED,eAAKI,YAAL,GAAoB,KAAKe,UAAL,CAAgB,CAAhB,EAAmBS,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CAApB;AACD;;AA/EoB,O","sourcesContent":["import { Texture2D,sp } from 'cc';\n\n\nexport class SpineData {\n\n  public bJson: boolean = false;\n  \n  public bBinary: boolean = false;\n\n  public name: string = '';\n\n  public key: string = '';\n\n  public url: string = '';\n\n  public version: string = '0.0.0';\n\n  //默认播放的时间线\n  public defanimation: string = '';\n\n  public _jsonData : any = null;\n  public _atlasData: string = null;\n  public _skeletData: any = null;\n  public _textureData : Texture2D = null;\n\n  public width: number = 0;\n  public height: number = 0;\n\n  public fps: number = 0;\n\n  public bones: number = 0;\n  public slots: number = 0;\n  public meshs: number = 0;\n\n  //spine数据实例化对象\n  public skeletonData: sp.SkeletonData = null;\n\n  //帧事件\n  public events: Array<string> = new Array();\n\n  //皮肤\n  public skins: Array<string> = new Array();\n\n  //Animation\n  public animations: Array<string> = [];\n\n\n  public parse( _skeletonCashe: any ){\n\n    this.width = _skeletonCashe.width;\n    this.height = _skeletonCashe.height;\n    this.version = _skeletonCashe.version;\n    this.fps = _skeletonCashe.fps;\n\n    let animations = _skeletonCashe.animations || [];\n    let skins = _skeletonCashe.skins || [];\n    let events = _skeletonCashe.events || [];\n\n    this.bones = _skeletonCashe.bones?.length;\n    this.slots = _skeletonCashe.slots?.length;\n\n    for (const v of animations) {\n      let name = v.name\n      if(v.duration >= 0){\n        name = name + '*' + ((v.duration > 0) ? v.duration: 0).toString();\n      }\n      this.animations.push(name);\n    }\n\n    if(skins instanceof Array){\n      for (const iterator of skins) {\n        this.skins.push(iterator.name);\n      }\n    } else{\n      this.skins.push('default');\n    }\n\n    for (const iterator of events) {\n      this.events.push(iterator.name || 'error');\n    }\n\n    this.defanimation = this.animations[0].split('*')[0];\n  }\n\n}"]}